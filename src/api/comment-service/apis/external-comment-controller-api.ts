/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseCommentResponse } from '../models';
// @ts-ignore
import type { ApiResponseListCommentResponse } from '../models';
// @ts-ignore
import type { ApiResponseVoid } from '../models';
// @ts-ignore
import type { CommentReplyRequest } from '../models';
// @ts-ignore
import type { CommentRootRequest } from '../models';
/**
 * ExternalCommentControllerApi - axios parameter creator
 * @export
 */
export const ExternalCommentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/comment/external/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CommentReplyRequest} commentReplyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReply: async (commentReplyRequest: CommentReplyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentReplyRequest' is not null or undefined
            assertParamExists('createReply', 'commentReplyRequest', commentReplyRequest)
            const localVarPath = `/comment/external/reply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commentReplyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CommentRootRequest} commentRootRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoot: async (commentRootRequest: CommentRootRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentRootRequest' is not null or undefined
            assertParamExists('createRoot', 'commentRootRequest', commentRootRequest)
            const localVarPath = `/comment/external/root`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commentRootRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReplies: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getReplies', 'id', id)
            const localVarPath = `/comment/external/{id}/replies`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CommentReplyRequest} commentReplyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: string, commentReplyRequest: CommentReplyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'commentReplyRequest' is not null or undefined
            assertParamExists('update', 'commentReplyRequest', commentReplyRequest)
            const localVarPath = `/comment/external/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(commentReplyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExternalCommentControllerApi - functional programming interface
 * @export
 */
export const ExternalCommentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExternalCommentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalCommentControllerApi._delete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CommentReplyRequest} commentReplyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReply(commentReplyRequest: CommentReplyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReply(commentReplyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalCommentControllerApi.createReply']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CommentRootRequest} commentRootRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRoot(commentRootRequest: CommentRootRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRoot(commentRootRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalCommentControllerApi.createRoot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReplies(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReplies(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalCommentControllerApi.getReplies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {CommentReplyRequest} commentReplyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: string, commentReplyRequest: CommentReplyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, commentReplyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalCommentControllerApi.update']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExternalCommentControllerApi - factory interface
 * @export
 */
export const ExternalCommentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExternalCommentControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ExternalCommentControllerApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(requestParameters: ExternalCommentControllerApiDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp._delete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ExternalCommentControllerApiCreateReplyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReply(requestParameters: ExternalCommentControllerApiCreateReplyRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseCommentResponse> {
            return localVarFp.createReply(requestParameters.commentReplyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ExternalCommentControllerApiCreateRootRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoot(requestParameters: ExternalCommentControllerApiCreateRootRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseCommentResponse> {
            return localVarFp.createRoot(requestParameters.commentRootRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ExternalCommentControllerApiGetRepliesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReplies(requestParameters: ExternalCommentControllerApiGetRepliesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListCommentResponse> {
            return localVarFp.getReplies(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ExternalCommentControllerApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: ExternalCommentControllerApiUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseCommentResponse> {
            return localVarFp.update(requestParameters.id, requestParameters.commentReplyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _delete operation in ExternalCommentControllerApi.
 * @export
 * @interface ExternalCommentControllerApiDeleteRequest
 */
export interface ExternalCommentControllerApiDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ExternalCommentControllerApiDelete
     */
    readonly id: string
}

/**
 * Request parameters for createReply operation in ExternalCommentControllerApi.
 * @export
 * @interface ExternalCommentControllerApiCreateReplyRequest
 */
export interface ExternalCommentControllerApiCreateReplyRequest {
    /**
     * 
     * @type {CommentReplyRequest}
     * @memberof ExternalCommentControllerApiCreateReply
     */
    readonly commentReplyRequest: CommentReplyRequest
}

/**
 * Request parameters for createRoot operation in ExternalCommentControllerApi.
 * @export
 * @interface ExternalCommentControllerApiCreateRootRequest
 */
export interface ExternalCommentControllerApiCreateRootRequest {
    /**
     * 
     * @type {CommentRootRequest}
     * @memberof ExternalCommentControllerApiCreateRoot
     */
    readonly commentRootRequest: CommentRootRequest
}

/**
 * Request parameters for getReplies operation in ExternalCommentControllerApi.
 * @export
 * @interface ExternalCommentControllerApiGetRepliesRequest
 */
export interface ExternalCommentControllerApiGetRepliesRequest {
    /**
     * 
     * @type {string}
     * @memberof ExternalCommentControllerApiGetReplies
     */
    readonly id: string
}

/**
 * Request parameters for update operation in ExternalCommentControllerApi.
 * @export
 * @interface ExternalCommentControllerApiUpdateRequest
 */
export interface ExternalCommentControllerApiUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof ExternalCommentControllerApiUpdate
     */
    readonly id: string

    /**
     * 
     * @type {CommentReplyRequest}
     * @memberof ExternalCommentControllerApiUpdate
     */
    readonly commentReplyRequest: CommentReplyRequest
}

/**
 * ExternalCommentControllerApi - object-oriented interface
 * @export
 * @class ExternalCommentControllerApi
 * @extends {BaseAPI}
 */
export class ExternalCommentControllerApi extends BaseAPI {
    /**
     * 
     * @param {ExternalCommentControllerApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalCommentControllerApi
     */
    public _delete(requestParameters: ExternalCommentControllerApiDeleteRequest, options?: RawAxiosRequestConfig) {
        return ExternalCommentControllerApiFp(this.configuration)._delete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExternalCommentControllerApiCreateReplyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalCommentControllerApi
     */
    public createReply(requestParameters: ExternalCommentControllerApiCreateReplyRequest, options?: RawAxiosRequestConfig) {
        return ExternalCommentControllerApiFp(this.configuration).createReply(requestParameters.commentReplyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExternalCommentControllerApiCreateRootRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalCommentControllerApi
     */
    public createRoot(requestParameters: ExternalCommentControllerApiCreateRootRequest, options?: RawAxiosRequestConfig) {
        return ExternalCommentControllerApiFp(this.configuration).createRoot(requestParameters.commentRootRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExternalCommentControllerApiGetRepliesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalCommentControllerApi
     */
    public getReplies(requestParameters: ExternalCommentControllerApiGetRepliesRequest, options?: RawAxiosRequestConfig) {
        return ExternalCommentControllerApiFp(this.configuration).getReplies(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExternalCommentControllerApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalCommentControllerApi
     */
    public update(requestParameters: ExternalCommentControllerApiUpdateRequest, options?: RawAxiosRequestConfig) {
        return ExternalCommentControllerApiFp(this.configuration).update(requestParameters.id, requestParameters.commentReplyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

