/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseChapterResponse } from '../models';
// @ts-ignore
import type { ApiResponseVoid } from '../models';
// @ts-ignore
import type { ChapterRequest } from '../models';
/**
 * InternalChapterControllerApi - axios parameter creator
 * @export
 */
export const InternalChapterControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} bookId 
         * @param {ChapterRequest} chapterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChapter: async (bookId: string, chapterRequest: ChapterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('createChapter', 'bookId', bookId)
            // verify required parameter 'chapterRequest' is not null or undefined
            assertParamExists('createChapter', 'chapterRequest', chapterRequest)
            const localVarPath = `/internal/{bookId}/add`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chapterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChapter: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteChapter', 'id', id)
            const localVarPath = `/internal/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChaptersByBookId: async (bookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('deleteChaptersByBookId', 'bookId', bookId)
            const localVarPath = `/internal/delete/book/{bookId}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {ChapterRequest} chapterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChapter: async (id: string, chapterRequest: ChapterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateChapter', 'id', id)
            // verify required parameter 'chapterRequest' is not null or undefined
            assertParamExists('updateChapter', 'chapterRequest', chapterRequest)
            const localVarPath = `/internal/update/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chapterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InternalChapterControllerApi - functional programming interface
 * @export
 */
export const InternalChapterControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InternalChapterControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} bookId 
         * @param {ChapterRequest} chapterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChapter(bookId: string, chapterRequest: ChapterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseChapterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createChapter(bookId, chapterRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalChapterControllerApi.createChapter']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChapter(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChapter(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalChapterControllerApi.deleteChapter']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChaptersByBookId(bookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChaptersByBookId(bookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalChapterControllerApi.deleteChaptersByBookId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {ChapterRequest} chapterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateChapter(id: string, chapterRequest: ChapterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseChapterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateChapter(id, chapterRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalChapterControllerApi.updateChapter']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InternalChapterControllerApi - factory interface
 * @export
 */
export const InternalChapterControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InternalChapterControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {InternalChapterControllerApiCreateChapterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChapter(requestParameters: InternalChapterControllerApiCreateChapterRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseChapterResponse> {
            return localVarFp.createChapter(requestParameters.bookId, requestParameters.chapterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InternalChapterControllerApiDeleteChapterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChapter(requestParameters: InternalChapterControllerApiDeleteChapterRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.deleteChapter(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InternalChapterControllerApiDeleteChaptersByBookIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChaptersByBookId(requestParameters: InternalChapterControllerApiDeleteChaptersByBookIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.deleteChaptersByBookId(requestParameters.bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InternalChapterControllerApiUpdateChapterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChapter(requestParameters: InternalChapterControllerApiUpdateChapterRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseChapterResponse> {
            return localVarFp.updateChapter(requestParameters.id, requestParameters.chapterRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createChapter operation in InternalChapterControllerApi.
 * @export
 * @interface InternalChapterControllerApiCreateChapterRequest
 */
export interface InternalChapterControllerApiCreateChapterRequest {
    /**
     * 
     * @type {string}
     * @memberof InternalChapterControllerApiCreateChapter
     */
    readonly bookId: string

    /**
     * 
     * @type {ChapterRequest}
     * @memberof InternalChapterControllerApiCreateChapter
     */
    readonly chapterRequest: ChapterRequest
}

/**
 * Request parameters for deleteChapter operation in InternalChapterControllerApi.
 * @export
 * @interface InternalChapterControllerApiDeleteChapterRequest
 */
export interface InternalChapterControllerApiDeleteChapterRequest {
    /**
     * 
     * @type {string}
     * @memberof InternalChapterControllerApiDeleteChapter
     */
    readonly id: string
}

/**
 * Request parameters for deleteChaptersByBookId operation in InternalChapterControllerApi.
 * @export
 * @interface InternalChapterControllerApiDeleteChaptersByBookIdRequest
 */
export interface InternalChapterControllerApiDeleteChaptersByBookIdRequest {
    /**
     * 
     * @type {string}
     * @memberof InternalChapterControllerApiDeleteChaptersByBookId
     */
    readonly bookId: string
}

/**
 * Request parameters for updateChapter operation in InternalChapterControllerApi.
 * @export
 * @interface InternalChapterControllerApiUpdateChapterRequest
 */
export interface InternalChapterControllerApiUpdateChapterRequest {
    /**
     * 
     * @type {string}
     * @memberof InternalChapterControllerApiUpdateChapter
     */
    readonly id: string

    /**
     * 
     * @type {ChapterRequest}
     * @memberof InternalChapterControllerApiUpdateChapter
     */
    readonly chapterRequest: ChapterRequest
}

/**
 * InternalChapterControllerApi - object-oriented interface
 * @export
 * @class InternalChapterControllerApi
 * @extends {BaseAPI}
 */
export class InternalChapterControllerApi extends BaseAPI {
    /**
     * 
     * @param {InternalChapterControllerApiCreateChapterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalChapterControllerApi
     */
    public createChapter(requestParameters: InternalChapterControllerApiCreateChapterRequest, options?: RawAxiosRequestConfig) {
        return InternalChapterControllerApiFp(this.configuration).createChapter(requestParameters.bookId, requestParameters.chapterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InternalChapterControllerApiDeleteChapterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalChapterControllerApi
     */
    public deleteChapter(requestParameters: InternalChapterControllerApiDeleteChapterRequest, options?: RawAxiosRequestConfig) {
        return InternalChapterControllerApiFp(this.configuration).deleteChapter(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InternalChapterControllerApiDeleteChaptersByBookIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalChapterControllerApi
     */
    public deleteChaptersByBookId(requestParameters: InternalChapterControllerApiDeleteChaptersByBookIdRequest, options?: RawAxiosRequestConfig) {
        return InternalChapterControllerApiFp(this.configuration).deleteChaptersByBookId(requestParameters.bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InternalChapterControllerApiUpdateChapterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalChapterControllerApi
     */
    public updateChapter(requestParameters: InternalChapterControllerApiUpdateChapterRequest, options?: RawAxiosRequestConfig) {
        return InternalChapterControllerApiFp(this.configuration).updateChapter(requestParameters.id, requestParameters.chapterRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

