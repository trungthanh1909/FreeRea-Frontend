/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseChapterResponse } from '../models';
// @ts-ignore
import type { ApiResponseListChapterResponse } from '../models';
// @ts-ignore
import type { ApiResponseLong } from '../models';
/**
 * ChapterControllerApi - axios parameter creator
 * @export
 */
export const ChapterControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countChaptersByBookId: async (bookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('countChaptersByBookId', 'bookId', bookId)
            const localVarPath = `/chapters/book/{bookId}/count`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bookId 
         * @param {number} chapterNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChapterByBookIdAndNumber: async (bookId: string, chapterNumber: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('getChapterByBookIdAndNumber', 'bookId', bookId)
            // verify required parameter 'chapterNumber' is not null or undefined
            assertParamExists('getChapterByBookIdAndNumber', 'chapterNumber', chapterNumber)
            const localVarPath = `/chapters/book/{bookId}/number/{chapterNumber}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)))
                .replace(`{${"chapterNumber"}}`, encodeURIComponent(String(chapterNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bookId 
         * @param {string} chapterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChapterById: async (bookId: string, chapterId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('getChapterById', 'bookId', bookId)
            // verify required parameter 'chapterId' is not null or undefined
            assertParamExists('getChapterById', 'chapterId', chapterId)
            const localVarPath = `/chapters/{bookId}/{chapterId}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)))
                .replace(`{${"chapterId"}}`, encodeURIComponent(String(chapterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChaptersByBookId: async (bookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('getChaptersByBookId', 'bookId', bookId)
            const localVarPath = `/chapters/book/{bookId}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLastChapterByBookId: async (bookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('getLastChapterByBookId', 'bookId', bookId)
            const localVarPath = `/chapters/book/{bookId}/last`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChapterControllerApi - functional programming interface
 * @export
 */
export const ChapterControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChapterControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countChaptersByBookId(bookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseLong>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countChaptersByBookId(bookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapterControllerApi.countChaptersByBookId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} bookId 
         * @param {number} chapterNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChapterByBookIdAndNumber(bookId: string, chapterNumber: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseChapterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChapterByBookIdAndNumber(bookId, chapterNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapterControllerApi.getChapterByBookIdAndNumber']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} bookId 
         * @param {string} chapterId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChapterById(bookId: string, chapterId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseChapterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChapterById(bookId, chapterId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapterControllerApi.getChapterById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChaptersByBookId(bookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListChapterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChaptersByBookId(bookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapterControllerApi.getChaptersByBookId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLastChapterByBookId(bookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseChapterResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLastChapterByBookId(bookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChapterControllerApi.getLastChapterByBookId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChapterControllerApi - factory interface
 * @export
 */
export const ChapterControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChapterControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ChapterControllerApiCountChaptersByBookIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countChaptersByBookId(requestParameters: ChapterControllerApiCountChaptersByBookIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseLong> {
            return localVarFp.countChaptersByBookId(requestParameters.bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ChapterControllerApiGetChapterByBookIdAndNumberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChapterByBookIdAndNumber(requestParameters: ChapterControllerApiGetChapterByBookIdAndNumberRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseChapterResponse> {
            return localVarFp.getChapterByBookIdAndNumber(requestParameters.bookId, requestParameters.chapterNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ChapterControllerApiGetChapterByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChapterById(requestParameters: ChapterControllerApiGetChapterByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseChapterResponse> {
            return localVarFp.getChapterById(requestParameters.bookId, requestParameters.chapterId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ChapterControllerApiGetChaptersByBookIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChaptersByBookId(requestParameters: ChapterControllerApiGetChaptersByBookIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListChapterResponse> {
            return localVarFp.getChaptersByBookId(requestParameters.bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ChapterControllerApiGetLastChapterByBookIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLastChapterByBookId(requestParameters: ChapterControllerApiGetLastChapterByBookIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseChapterResponse> {
            return localVarFp.getLastChapterByBookId(requestParameters.bookId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for countChaptersByBookId operation in ChapterControllerApi.
 * @export
 * @interface ChapterControllerApiCountChaptersByBookIdRequest
 */
export interface ChapterControllerApiCountChaptersByBookIdRequest {
    /**
     * 
     * @type {string}
     * @memberof ChapterControllerApiCountChaptersByBookId
     */
    readonly bookId: string
}

/**
 * Request parameters for getChapterByBookIdAndNumber operation in ChapterControllerApi.
 * @export
 * @interface ChapterControllerApiGetChapterByBookIdAndNumberRequest
 */
export interface ChapterControllerApiGetChapterByBookIdAndNumberRequest {
    /**
     * 
     * @type {string}
     * @memberof ChapterControllerApiGetChapterByBookIdAndNumber
     */
    readonly bookId: string

    /**
     * 
     * @type {number}
     * @memberof ChapterControllerApiGetChapterByBookIdAndNumber
     */
    readonly chapterNumber: number
}

/**
 * Request parameters for getChapterById operation in ChapterControllerApi.
 * @export
 * @interface ChapterControllerApiGetChapterByIdRequest
 */
export interface ChapterControllerApiGetChapterByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof ChapterControllerApiGetChapterById
     */
    readonly bookId: string

    /**
     * 
     * @type {string}
     * @memberof ChapterControllerApiGetChapterById
     */
    readonly chapterId: string
}

/**
 * Request parameters for getChaptersByBookId operation in ChapterControllerApi.
 * @export
 * @interface ChapterControllerApiGetChaptersByBookIdRequest
 */
export interface ChapterControllerApiGetChaptersByBookIdRequest {
    /**
     * 
     * @type {string}
     * @memberof ChapterControllerApiGetChaptersByBookId
     */
    readonly bookId: string
}

/**
 * Request parameters for getLastChapterByBookId operation in ChapterControllerApi.
 * @export
 * @interface ChapterControllerApiGetLastChapterByBookIdRequest
 */
export interface ChapterControllerApiGetLastChapterByBookIdRequest {
    /**
     * 
     * @type {string}
     * @memberof ChapterControllerApiGetLastChapterByBookId
     */
    readonly bookId: string
}

/**
 * ChapterControllerApi - object-oriented interface
 * @export
 * @class ChapterControllerApi
 * @extends {BaseAPI}
 */
export class ChapterControllerApi extends BaseAPI {
    /**
     * 
     * @param {ChapterControllerApiCountChaptersByBookIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapterControllerApi
     */
    public countChaptersByBookId(requestParameters: ChapterControllerApiCountChaptersByBookIdRequest, options?: RawAxiosRequestConfig) {
        return ChapterControllerApiFp(this.configuration).countChaptersByBookId(requestParameters.bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ChapterControllerApiGetChapterByBookIdAndNumberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapterControllerApi
     */
    public getChapterByBookIdAndNumber(requestParameters: ChapterControllerApiGetChapterByBookIdAndNumberRequest, options?: RawAxiosRequestConfig) {
        return ChapterControllerApiFp(this.configuration).getChapterByBookIdAndNumber(requestParameters.bookId, requestParameters.chapterNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ChapterControllerApiGetChapterByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapterControllerApi
     */
    public getChapterById(requestParameters: ChapterControllerApiGetChapterByIdRequest, options?: RawAxiosRequestConfig) {
        return ChapterControllerApiFp(this.configuration).getChapterById(requestParameters.bookId, requestParameters.chapterId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ChapterControllerApiGetChaptersByBookIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapterControllerApi
     */
    public getChaptersByBookId(requestParameters: ChapterControllerApiGetChaptersByBookIdRequest, options?: RawAxiosRequestConfig) {
        return ChapterControllerApiFp(this.configuration).getChaptersByBookId(requestParameters.bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ChapterControllerApiGetLastChapterByBookIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChapterControllerApi
     */
    public getLastChapterByBookId(requestParameters: ChapterControllerApiGetLastChapterByBookIdRequest, options?: RawAxiosRequestConfig) {
        return ChapterControllerApiFp(this.configuration).getLastChapterByBookId(requestParameters.bookId, options).then((request) => request(this.axios, this.basePath));
    }
}

