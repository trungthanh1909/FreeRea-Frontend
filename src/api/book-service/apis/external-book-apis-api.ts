/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseBookResponse } from '../models';
// @ts-ignore
import type { ApiResponseListBookResponse } from '../models';
/**
 * ExternalBookAPIsApi - axios parameter creator
 * @export
 */
export const ExternalBookAPIsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all books in database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBooks: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/book/books/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a book by its unique ID
         * @summary Get book by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBookById', 'id', id)
            const localVarPath = `/book/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve books ordered by their creation date descending
         * @summary Get books sorted by created date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooksOrderByCreatedDateDesc: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/book/books/by-created-date`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve books ordered by their view count descending
         * @summary Get books sorted by view count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooksOrderByViewCountDesc: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/book/books/by-view-count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExternalBookAPIsApi - functional programming interface
 * @export
 */
export const ExternalBookAPIsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExternalBookAPIsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all books in database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllBooks(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListBookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllBooks(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalBookAPIsApi.getAllBooks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a book by its unique ID
         * @summary Get book by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBookById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalBookAPIsApi.getBookById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve books ordered by their creation date descending
         * @summary Get books sorted by created date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBooksOrderByCreatedDateDesc(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListBookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBooksOrderByCreatedDateDesc(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalBookAPIsApi.getBooksOrderByCreatedDateDesc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve books ordered by their view count descending
         * @summary Get books sorted by view count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBooksOrderByViewCountDesc(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListBookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBooksOrderByViewCountDesc(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExternalBookAPIsApi.getBooksOrderByViewCountDesc']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExternalBookAPIsApi - factory interface
 * @export
 */
export const ExternalBookAPIsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExternalBookAPIsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all books in database
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllBooks(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListBookResponse> {
            return localVarFp.getAllBooks(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a book by its unique ID
         * @summary Get book by ID
         * @param {ExternalBookAPIsApiGetBookByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookById(requestParameters: ExternalBookAPIsApiGetBookByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBookResponse> {
            return localVarFp.getBookById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve books ordered by their creation date descending
         * @summary Get books sorted by created date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooksOrderByCreatedDateDesc(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListBookResponse> {
            return localVarFp.getBooksOrderByCreatedDateDesc(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve books ordered by their view count descending
         * @summary Get books sorted by view count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooksOrderByViewCountDesc(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListBookResponse> {
            return localVarFp.getBooksOrderByViewCountDesc(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBookById operation in ExternalBookAPIsApi.
 * @export
 * @interface ExternalBookAPIsApiGetBookByIdRequest
 */
export interface ExternalBookAPIsApiGetBookByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof ExternalBookAPIsApiGetBookById
     */
    readonly id: string
}

/**
 * ExternalBookAPIsApi - object-oriented interface
 * @export
 * @class ExternalBookAPIsApi
 * @extends {BaseAPI}
 */
export class ExternalBookAPIsApi extends BaseAPI {
    /**
     * 
     * @summary Get all books in database
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalBookAPIsApi
     */
    public getAllBooks(options?: RawAxiosRequestConfig) {
        return ExternalBookAPIsApiFp(this.configuration).getAllBooks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a book by its unique ID
     * @summary Get book by ID
     * @param {ExternalBookAPIsApiGetBookByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalBookAPIsApi
     */
    public getBookById(requestParameters: ExternalBookAPIsApiGetBookByIdRequest, options?: RawAxiosRequestConfig) {
        return ExternalBookAPIsApiFp(this.configuration).getBookById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve books ordered by their creation date descending
     * @summary Get books sorted by created date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalBookAPIsApi
     */
    public getBooksOrderByCreatedDateDesc(options?: RawAxiosRequestConfig) {
        return ExternalBookAPIsApiFp(this.configuration).getBooksOrderByCreatedDateDesc(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve books ordered by their view count descending
     * @summary Get books sorted by view count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalBookAPIsApi
     */
    public getBooksOrderByViewCountDesc(options?: RawAxiosRequestConfig) {
        return ExternalBookAPIsApiFp(this.configuration).getBooksOrderByViewCountDesc(options).then((request) => request(this.axios, this.basePath));
    }
}

