/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseBookCreationResponse } from '../models';
// @ts-ignore
import type { ApiResponseBookResponse } from '../models';
// @ts-ignore
import type { ApiResponseVoid } from '../models';
// @ts-ignore
import type { BookCreationRequest } from '../models';
// @ts-ignore
import type { BookRequest } from '../models';
/**
 * InternalBookControllerApi - axios parameter creator
 * @export
 */
export const InternalBookControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkBookExists: async (bookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('checkBookExists', 'bookId', bookId)
            const localVarPath = `/internal/{bookId}/exists`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BookCreationRequest} bookCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBook: async (bookCreationRequest: BookCreationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookCreationRequest' is not null or undefined
            assertParamExists('createBook', 'bookCreationRequest', bookCreationRequest)
            const localVarPath = `/internal/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookCreationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBook: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBook', 'id', id)
            const localVarPath = `/internal/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {BookRequest} bookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBook: async (id: string, bookRequest: BookRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateBook', 'id', id)
            // verify required parameter 'bookRequest' is not null or undefined
            assertParamExists('updateBook', 'bookRequest', bookRequest)
            const localVarPath = `/internal/update/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InternalBookControllerApi - functional programming interface
 * @export
 */
export const InternalBookControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InternalBookControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkBookExists(bookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkBookExists(bookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalBookControllerApi.checkBookExists']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BookCreationRequest} bookCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBook(bookCreationRequest: BookCreationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBookCreationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBook(bookCreationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalBookControllerApi.createBook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBook(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBook(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalBookControllerApi.deleteBook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {BookRequest} bookRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBook(id: string, bookRequest: BookRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBook(id, bookRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalBookControllerApi.updateBook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InternalBookControllerApi - factory interface
 * @export
 */
export const InternalBookControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InternalBookControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {InternalBookControllerApiCheckBookExistsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkBookExists(requestParameters: InternalBookControllerApiCheckBookExistsRequest, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.checkBookExists(requestParameters.bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InternalBookControllerApiCreateBookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBook(requestParameters: InternalBookControllerApiCreateBookRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBookCreationResponse> {
            return localVarFp.createBook(requestParameters.bookCreationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InternalBookControllerApiDeleteBookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBook(requestParameters: InternalBookControllerApiDeleteBookRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.deleteBook(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InternalBookControllerApiUpdateBookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBook(requestParameters: InternalBookControllerApiUpdateBookRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBookResponse> {
            return localVarFp.updateBook(requestParameters.id, requestParameters.bookRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkBookExists operation in InternalBookControllerApi.
 * @export
 * @interface InternalBookControllerApiCheckBookExistsRequest
 */
export interface InternalBookControllerApiCheckBookExistsRequest {
    /**
     * 
     * @type {string}
     * @memberof InternalBookControllerApiCheckBookExists
     */
    readonly bookId: string
}

/**
 * Request parameters for createBook operation in InternalBookControllerApi.
 * @export
 * @interface InternalBookControllerApiCreateBookRequest
 */
export interface InternalBookControllerApiCreateBookRequest {
    /**
     * 
     * @type {BookCreationRequest}
     * @memberof InternalBookControllerApiCreateBook
     */
    readonly bookCreationRequest: BookCreationRequest
}

/**
 * Request parameters for deleteBook operation in InternalBookControllerApi.
 * @export
 * @interface InternalBookControllerApiDeleteBookRequest
 */
export interface InternalBookControllerApiDeleteBookRequest {
    /**
     * 
     * @type {string}
     * @memberof InternalBookControllerApiDeleteBook
     */
    readonly id: string
}

/**
 * Request parameters for updateBook operation in InternalBookControllerApi.
 * @export
 * @interface InternalBookControllerApiUpdateBookRequest
 */
export interface InternalBookControllerApiUpdateBookRequest {
    /**
     * 
     * @type {string}
     * @memberof InternalBookControllerApiUpdateBook
     */
    readonly id: string

    /**
     * 
     * @type {BookRequest}
     * @memberof InternalBookControllerApiUpdateBook
     */
    readonly bookRequest: BookRequest
}

/**
 * InternalBookControllerApi - object-oriented interface
 * @export
 * @class InternalBookControllerApi
 * @extends {BaseAPI}
 */
export class InternalBookControllerApi extends BaseAPI {
    /**
     * 
     * @param {InternalBookControllerApiCheckBookExistsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalBookControllerApi
     */
    public checkBookExists(requestParameters: InternalBookControllerApiCheckBookExistsRequest, options?: RawAxiosRequestConfig) {
        return InternalBookControllerApiFp(this.configuration).checkBookExists(requestParameters.bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InternalBookControllerApiCreateBookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalBookControllerApi
     */
    public createBook(requestParameters: InternalBookControllerApiCreateBookRequest, options?: RawAxiosRequestConfig) {
        return InternalBookControllerApiFp(this.configuration).createBook(requestParameters.bookCreationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InternalBookControllerApiDeleteBookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalBookControllerApi
     */
    public deleteBook(requestParameters: InternalBookControllerApiDeleteBookRequest, options?: RawAxiosRequestConfig) {
        return InternalBookControllerApiFp(this.configuration).deleteBook(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InternalBookControllerApiUpdateBookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalBookControllerApi
     */
    public updateBook(requestParameters: InternalBookControllerApiUpdateBookRequest, options?: RawAxiosRequestConfig) {
        return InternalBookControllerApiFp(this.configuration).updateBook(requestParameters.id, requestParameters.bookRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

