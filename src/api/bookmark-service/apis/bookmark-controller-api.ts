/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseBookmarkResponse } from '../models';
// @ts-ignore
import type { ApiResponseBoolean } from '../models';
// @ts-ignore
import type { ApiResponseListBookmarkResponse } from '../models';
// @ts-ignore
import type { ApiResponseVoid } from '../models';
// @ts-ignore
import type { BookmarkRequest } from '../models';
/**
 * BookmarkControllerApi - axios parameter creator
 * @export
 */
export const BookmarkControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BookmarkRequest} bookmarkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBookmark: async (bookmarkRequest: BookmarkRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookmarkRequest' is not null or undefined
            assertParamExists('createBookmark', 'bookmarkRequest', bookmarkRequest)
            const localVarPath = `/bookmarks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookmarkRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BookmarkRequest} bookmarkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBookmark: async (bookmarkRequest: BookmarkRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookmarkRequest' is not null or undefined
            assertParamExists('deleteBookmark', 'bookmarkRequest', bookmarkRequest)
            const localVarPath = `/bookmarks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookmarkRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        existsBookmark: async (userId: number, bookId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('existsBookmark', 'userId', userId)
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('existsBookmark', 'bookId', bookId)
            const localVarPath = `/bookmarks/exists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (bookId !== undefined) {
                localVarQueryParameter['bookId'] = bookId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookmarksByUser: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getBookmarksByUser', 'userId', userId)
            const localVarPath = `/bookmarks/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookmarkControllerApi - functional programming interface
 * @export
 */
export const BookmarkControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookmarkControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {BookmarkRequest} bookmarkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBookmark(bookmarkRequest: BookmarkRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBookmarkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBookmark(bookmarkRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookmarkControllerApi.createBookmark']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BookmarkRequest} bookmarkRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBookmark(bookmarkRequest: BookmarkRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBookmark(bookmarkRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookmarkControllerApi.deleteBookmark']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {number} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async existsBookmark(userId: number, bookId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.existsBookmark(userId, bookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookmarkControllerApi.existsBookmark']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookmarksByUser(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListBookmarkResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBookmarksByUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookmarkControllerApi.getBookmarksByUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookmarkControllerApi - factory interface
 * @export
 */
export const BookmarkControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookmarkControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {BookmarkControllerApiCreateBookmarkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBookmark(requestParameters: BookmarkControllerApiCreateBookmarkRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBookmarkResponse> {
            return localVarFp.createBookmark(requestParameters.bookmarkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BookmarkControllerApiDeleteBookmarkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBookmark(requestParameters: BookmarkControllerApiDeleteBookmarkRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.deleteBookmark(requestParameters.bookmarkRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BookmarkControllerApiExistsBookmarkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        existsBookmark(requestParameters: BookmarkControllerApiExistsBookmarkRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoolean> {
            return localVarFp.existsBookmark(requestParameters.userId, requestParameters.bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BookmarkControllerApiGetBookmarksByUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookmarksByUser(requestParameters: BookmarkControllerApiGetBookmarksByUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListBookmarkResponse> {
            return localVarFp.getBookmarksByUser(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createBookmark operation in BookmarkControllerApi.
 * @export
 * @interface BookmarkControllerApiCreateBookmarkRequest
 */
export interface BookmarkControllerApiCreateBookmarkRequest {
    /**
     * 
     * @type {BookmarkRequest}
     * @memberof BookmarkControllerApiCreateBookmark
     */
    readonly bookmarkRequest: BookmarkRequest
}

/**
 * Request parameters for deleteBookmark operation in BookmarkControllerApi.
 * @export
 * @interface BookmarkControllerApiDeleteBookmarkRequest
 */
export interface BookmarkControllerApiDeleteBookmarkRequest {
    /**
     * 
     * @type {BookmarkRequest}
     * @memberof BookmarkControllerApiDeleteBookmark
     */
    readonly bookmarkRequest: BookmarkRequest
}

/**
 * Request parameters for existsBookmark operation in BookmarkControllerApi.
 * @export
 * @interface BookmarkControllerApiExistsBookmarkRequest
 */
export interface BookmarkControllerApiExistsBookmarkRequest {
    /**
     * 
     * @type {number}
     * @memberof BookmarkControllerApiExistsBookmark
     */
    readonly userId: number

    /**
     * 
     * @type {number}
     * @memberof BookmarkControllerApiExistsBookmark
     */
    readonly bookId: number
}

/**
 * Request parameters for getBookmarksByUser operation in BookmarkControllerApi.
 * @export
 * @interface BookmarkControllerApiGetBookmarksByUserRequest
 */
export interface BookmarkControllerApiGetBookmarksByUserRequest {
    /**
     * 
     * @type {number}
     * @memberof BookmarkControllerApiGetBookmarksByUser
     */
    readonly userId: number
}

/**
 * BookmarkControllerApi - object-oriented interface
 * @export
 * @class BookmarkControllerApi
 * @extends {BaseAPI}
 */
export class BookmarkControllerApi extends BaseAPI {
    /**
     * 
     * @param {BookmarkControllerApiCreateBookmarkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookmarkControllerApi
     */
    public createBookmark(requestParameters: BookmarkControllerApiCreateBookmarkRequest, options?: RawAxiosRequestConfig) {
        return BookmarkControllerApiFp(this.configuration).createBookmark(requestParameters.bookmarkRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookmarkControllerApiDeleteBookmarkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookmarkControllerApi
     */
    public deleteBookmark(requestParameters: BookmarkControllerApiDeleteBookmarkRequest, options?: RawAxiosRequestConfig) {
        return BookmarkControllerApiFp(this.configuration).deleteBookmark(requestParameters.bookmarkRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookmarkControllerApiExistsBookmarkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookmarkControllerApi
     */
    public existsBookmark(requestParameters: BookmarkControllerApiExistsBookmarkRequest, options?: RawAxiosRequestConfig) {
        return BookmarkControllerApiFp(this.configuration).existsBookmark(requestParameters.userId, requestParameters.bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookmarkControllerApiGetBookmarksByUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookmarkControllerApi
     */
    public getBookmarksByUser(requestParameters: BookmarkControllerApiGetBookmarksByUserRequest, options?: RawAxiosRequestConfig) {
        return BookmarkControllerApiFp(this.configuration).getBookmarksByUser(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }
}

