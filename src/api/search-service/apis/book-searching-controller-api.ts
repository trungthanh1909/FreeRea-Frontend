/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseListBookSearchingResult } from '../models';
/**
 * BookSearchingControllerApi - axios parameter creator
 * @export
 */
export const BookSearchingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} prefix 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteTitle: async (prefix: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prefix' is not null or undefined
            assertParamExists('autocompleteTitle', 'prefix', prefix)
            const localVarPath = `/search/search/autocomplete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prefix !== undefined) {
                localVarQueryParameter['prefix'] = prefix;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/search/search/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} categories 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookByCategories: async (categories: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categories' is not null or undefined
            assertParamExists('getBookByCategories', 'categories', categories)
            const localVarPath = `/search/search/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categories) {
                localVarQueryParameter['categories'] = categories;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} title 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookByTitle: async (title: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            assertParamExists('getBookByTitle', 'title', title)
            const localVarPath = `/search/search/title`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} author 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooksByAuthor: async (author: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'author' is not null or undefined
            assertParamExists('getBooksByAuthor', 'author', author)
            const localVarPath = `/search/search/author`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (author !== undefined) {
                localVarQueryParameter['author'] = author;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookSearchingControllerApi - functional programming interface
 * @export
 */
export const BookSearchingControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookSearchingControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} prefix 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async autocompleteTitle(prefix: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListBookSearchingResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.autocompleteTitle(prefix, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookSearchingControllerApi.autocompleteTitle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListBookSearchingResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookSearchingControllerApi.getAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<string>} categories 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookByCategories(categories: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListBookSearchingResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBookByCategories(categories, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookSearchingControllerApi.getBookByCategories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} title 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookByTitle(title: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListBookSearchingResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBookByTitle(title, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookSearchingControllerApi.getBookByTitle']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} author 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBooksByAuthor(author: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListBookSearchingResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBooksByAuthor(author, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookSearchingControllerApi.getBooksByAuthor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookSearchingControllerApi - factory interface
 * @export
 */
export const BookSearchingControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookSearchingControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {BookSearchingControllerApiAutocompleteTitleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteTitle(requestParameters: BookSearchingControllerApiAutocompleteTitleRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListBookSearchingResult> {
            return localVarFp.autocompleteTitle(requestParameters.prefix, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListBookSearchingResult> {
            return localVarFp.getAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BookSearchingControllerApiGetBookByCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookByCategories(requestParameters: BookSearchingControllerApiGetBookByCategoriesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListBookSearchingResult> {
            return localVarFp.getBookByCategories(requestParameters.categories, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BookSearchingControllerApiGetBookByTitleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookByTitle(requestParameters: BookSearchingControllerApiGetBookByTitleRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListBookSearchingResult> {
            return localVarFp.getBookByTitle(requestParameters.title, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BookSearchingControllerApiGetBooksByAuthorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooksByAuthor(requestParameters: BookSearchingControllerApiGetBooksByAuthorRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListBookSearchingResult> {
            return localVarFp.getBooksByAuthor(requestParameters.author, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for autocompleteTitle operation in BookSearchingControllerApi.
 * @export
 * @interface BookSearchingControllerApiAutocompleteTitleRequest
 */
export interface BookSearchingControllerApiAutocompleteTitleRequest {
    /**
     * 
     * @type {string}
     * @memberof BookSearchingControllerApiAutocompleteTitle
     */
    readonly prefix: string
}

/**
 * Request parameters for getBookByCategories operation in BookSearchingControllerApi.
 * @export
 * @interface BookSearchingControllerApiGetBookByCategoriesRequest
 */
export interface BookSearchingControllerApiGetBookByCategoriesRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof BookSearchingControllerApiGetBookByCategories
     */
    readonly categories: Array<string>
}

/**
 * Request parameters for getBookByTitle operation in BookSearchingControllerApi.
 * @export
 * @interface BookSearchingControllerApiGetBookByTitleRequest
 */
export interface BookSearchingControllerApiGetBookByTitleRequest {
    /**
     * 
     * @type {string}
     * @memberof BookSearchingControllerApiGetBookByTitle
     */
    readonly title: string
}

/**
 * Request parameters for getBooksByAuthor operation in BookSearchingControllerApi.
 * @export
 * @interface BookSearchingControllerApiGetBooksByAuthorRequest
 */
export interface BookSearchingControllerApiGetBooksByAuthorRequest {
    /**
     * 
     * @type {string}
     * @memberof BookSearchingControllerApiGetBooksByAuthor
     */
    readonly author: string
}

/**
 * BookSearchingControllerApi - object-oriented interface
 * @export
 * @class BookSearchingControllerApi
 * @extends {BaseAPI}
 */
export class BookSearchingControllerApi extends BaseAPI {
    /**
     * 
     * @param {BookSearchingControllerApiAutocompleteTitleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookSearchingControllerApi
     */
    public autocompleteTitle(requestParameters: BookSearchingControllerApiAutocompleteTitleRequest, options?: RawAxiosRequestConfig) {
        return BookSearchingControllerApiFp(this.configuration).autocompleteTitle(requestParameters.prefix, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookSearchingControllerApi
     */
    public getAll(options?: RawAxiosRequestConfig) {
        return BookSearchingControllerApiFp(this.configuration).getAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookSearchingControllerApiGetBookByCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookSearchingControllerApi
     */
    public getBookByCategories(requestParameters: BookSearchingControllerApiGetBookByCategoriesRequest, options?: RawAxiosRequestConfig) {
        return BookSearchingControllerApiFp(this.configuration).getBookByCategories(requestParameters.categories, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookSearchingControllerApiGetBookByTitleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookSearchingControllerApi
     */
    public getBookByTitle(requestParameters: BookSearchingControllerApiGetBookByTitleRequest, options?: RawAxiosRequestConfig) {
        return BookSearchingControllerApiFp(this.configuration).getBookByTitle(requestParameters.title, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BookSearchingControllerApiGetBooksByAuthorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookSearchingControllerApi
     */
    public getBooksByAuthor(requestParameters: BookSearchingControllerApiGetBooksByAuthorRequest, options?: RawAxiosRequestConfig) {
        return BookSearchingControllerApiFp(this.configuration).getBooksByAuthor(requestParameters.author, options).then((request) => request(this.axios, this.basePath));
    }
}

