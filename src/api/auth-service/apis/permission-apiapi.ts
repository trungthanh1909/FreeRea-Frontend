/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseListPermissionResponse } from '../models';
// @ts-ignore
import type { ApiResponsePermissionResponse } from '../models';
// @ts-ignore
import type { ApiResponseVoid } from '../models';
// @ts-ignore
import type { PermissionRequest } from '../models';
/**
 * PermissionAPIApi - axios parameter creator
 * @export
 */
export const PermissionAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary create permission
         * @param {PermissionRequest} permissionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPermission: async (permissionRequest: PermissionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'permissionRequest' is not null or undefined
            assertParamExists('createPermission', 'permissionRequest', permissionRequest)
            const localVarPath = `/identity/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(permissionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete permission by permission id
         * @param {string} permissionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePermission: async (permissionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'permissionId' is not null or undefined
            assertParamExists('deletePermission', 'permissionId', permissionId)
            const localVarPath = `/identity/permissions/{permissionId}`
                .replace(`{${"permissionId"}}`, encodeURIComponent(String(permissionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get all permission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllPermissions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identity/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PermissionAPIApi - functional programming interface
 * @export
 */
export const PermissionAPIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PermissionAPIApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary create permission
         * @param {PermissionRequest} permissionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPermission(permissionRequest: PermissionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponsePermissionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPermission(permissionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PermissionAPIApi.createPermission']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary delete permission by permission id
         * @param {string} permissionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePermission(permissionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePermission(permissionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PermissionAPIApi.deletePermission']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary get all permission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllPermissions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListPermissionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllPermissions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PermissionAPIApi.findAllPermissions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PermissionAPIApi - factory interface
 * @export
 */
export const PermissionAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PermissionAPIApiFp(configuration)
    return {
        /**
         * 
         * @summary create permission
         * @param {PermissionAPIApiCreatePermissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPermission(requestParameters: PermissionAPIApiCreatePermissionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponsePermissionResponse> {
            return localVarFp.createPermission(requestParameters.permissionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete permission by permission id
         * @param {PermissionAPIApiDeletePermissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePermission(requestParameters: PermissionAPIApiDeletePermissionRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.deletePermission(requestParameters.permissionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get all permission
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllPermissions(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListPermissionResponse> {
            return localVarFp.findAllPermissions(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPermission operation in PermissionAPIApi.
 * @export
 * @interface PermissionAPIApiCreatePermissionRequest
 */
export interface PermissionAPIApiCreatePermissionRequest {
    /**
     * 
     * @type {PermissionRequest}
     * @memberof PermissionAPIApiCreatePermission
     */
    readonly permissionRequest: PermissionRequest
}

/**
 * Request parameters for deletePermission operation in PermissionAPIApi.
 * @export
 * @interface PermissionAPIApiDeletePermissionRequest
 */
export interface PermissionAPIApiDeletePermissionRequest {
    /**
     * 
     * @type {string}
     * @memberof PermissionAPIApiDeletePermission
     */
    readonly permissionId: string
}

/**
 * PermissionAPIApi - object-oriented interface
 * @export
 * @class PermissionAPIApi
 * @extends {BaseAPI}
 */
export class PermissionAPIApi extends BaseAPI {
    /**
     * 
     * @summary create permission
     * @param {PermissionAPIApiCreatePermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionAPIApi
     */
    public createPermission(requestParameters: PermissionAPIApiCreatePermissionRequest, options?: RawAxiosRequestConfig) {
        return PermissionAPIApiFp(this.configuration).createPermission(requestParameters.permissionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete permission by permission id
     * @param {PermissionAPIApiDeletePermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionAPIApi
     */
    public deletePermission(requestParameters: PermissionAPIApiDeletePermissionRequest, options?: RawAxiosRequestConfig) {
        return PermissionAPIApiFp(this.configuration).deletePermission(requestParameters.permissionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get all permission
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PermissionAPIApi
     */
    public findAllPermissions(options?: RawAxiosRequestConfig) {
        return PermissionAPIApiFp(this.configuration).findAllPermissions(options).then((request) => request(this.axios, this.basePath));
    }
}

