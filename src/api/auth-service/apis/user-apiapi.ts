/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseChangePasswordResponse } from '../models';
// @ts-ignore
import type { ApiResponseListUserResponse } from '../models';
// @ts-ignore
import type { ApiResponseString } from '../models';
// @ts-ignore
import type { ApiResponseUserProfile } from '../models';
// @ts-ignore
import type { ApiResponseUserResponse } from '../models';
// @ts-ignore
import type { ApiResponseVoid } from '../models';
// @ts-ignore
import type { ChangePasswordRequest } from '../models';
// @ts-ignore
import type { UserCreateRequest } from '../models';
// @ts-ignore
import type { UserUpdateRequest } from '../models';
/**
 * UserAPIApi - axios parameter creator
 * @export
 */
export const UserAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary change password
         * @param {string} userId 
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (userId: string, changePasswordRequest: ChangePasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('changePassword', 'userId', userId)
            // verify required parameter 'changePasswordRequest' is not null or undefined
            assertParamExists('changePassword', 'changePasswordRequest', changePasswordRequest)
            const localVarPath = `/users/change-password/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create user account then pushing it to user-profile-service to create user profile
         * @summary registration
         * @param {UserCreateRequest} userCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (userCreateRequest: UserCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreateRequest' is not null or undefined
            assertParamExists('createUser', 'userCreateRequest', userCreateRequest)
            const localVarPath = `/users/registration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * find all user existed
         * @summary find all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get user by id
         * @summary find all users
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUserById: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('findUserById', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get the user\'s profile
         * @summary find all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get current user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserId: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/get-user-id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {UserUpdateRequest} userUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId: string, userUpdateRequest: UserUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId)
            // verify required parameter 'userUpdateRequest' is not null or undefined
            assertParamExists('updateUser', 'userUpdateRequest', userUpdateRequest)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserAPIApi - functional programming interface
 * @export
 */
export const UserAPIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserAPIApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary change password
         * @param {string} userId 
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(userId: string, changePasswordRequest: ChangePasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseChangePasswordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(userId, changePasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAPIApi.changePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * create user account then pushing it to user-profile-service to create user profile
         * @summary registration
         * @param {UserCreateRequest} userCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(userCreateRequest: UserCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(userCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAPIApi.createUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAPIApi.deleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * find all user existed
         * @summary find all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllUsers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAPIApi.findAllUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get user by id
         * @summary find all users
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findUserById(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findUserById(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAPIApi.findUserById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * get the user\'s profile
         * @summary find all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseUserProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfo(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAPIApi.getInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary get current user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserId(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserId(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAPIApi.getUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {UserUpdateRequest} userUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId: string, userUpdateRequest: UserUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userId, userUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserAPIApi.updateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserAPIApi - factory interface
 * @export
 */
export const UserAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserAPIApiFp(configuration)
    return {
        /**
         * 
         * @summary change password
         * @param {UserAPIApiChangePasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(requestParameters: UserAPIApiChangePasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseChangePasswordResponse> {
            return localVarFp.changePassword(requestParameters.userId, requestParameters.changePasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * create user account then pushing it to user-profile-service to create user profile
         * @summary registration
         * @param {UserAPIApiCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(requestParameters: UserAPIApiCreateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseUserResponse> {
            return localVarFp.createUser(requestParameters.userCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserAPIApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(requestParameters: UserAPIApiDeleteUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.deleteUser(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * find all user existed
         * @summary find all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllUsers(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListUserResponse> {
            return localVarFp.findAllUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * get user by id
         * @summary find all users
         * @param {UserAPIApiFindUserByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUserById(requestParameters: UserAPIApiFindUserByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseUserResponse> {
            return localVarFp.findUserById(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * get the user\'s profile
         * @summary find all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseUserProfile> {
            return localVarFp.getInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get current user id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserId(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseString> {
            return localVarFp.getUserId(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserAPIApiUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(requestParameters: UserAPIApiUpdateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseUserResponse> {
            return localVarFp.updateUser(requestParameters.userId, requestParameters.userUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for changePassword operation in UserAPIApi.
 * @export
 * @interface UserAPIApiChangePasswordRequest
 */
export interface UserAPIApiChangePasswordRequest {
    /**
     * 
     * @type {string}
     * @memberof UserAPIApiChangePassword
     */
    readonly userId: string

    /**
     * 
     * @type {ChangePasswordRequest}
     * @memberof UserAPIApiChangePassword
     */
    readonly changePasswordRequest: ChangePasswordRequest
}

/**
 * Request parameters for createUser operation in UserAPIApi.
 * @export
 * @interface UserAPIApiCreateUserRequest
 */
export interface UserAPIApiCreateUserRequest {
    /**
     * 
     * @type {UserCreateRequest}
     * @memberof UserAPIApiCreateUser
     */
    readonly userCreateRequest: UserCreateRequest
}

/**
 * Request parameters for deleteUser operation in UserAPIApi.
 * @export
 * @interface UserAPIApiDeleteUserRequest
 */
export interface UserAPIApiDeleteUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UserAPIApiDeleteUser
     */
    readonly userId: string
}

/**
 * Request parameters for findUserById operation in UserAPIApi.
 * @export
 * @interface UserAPIApiFindUserByIdRequest
 */
export interface UserAPIApiFindUserByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof UserAPIApiFindUserById
     */
    readonly userId: string
}

/**
 * Request parameters for updateUser operation in UserAPIApi.
 * @export
 * @interface UserAPIApiUpdateUserRequest
 */
export interface UserAPIApiUpdateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UserAPIApiUpdateUser
     */
    readonly userId: string

    /**
     * 
     * @type {UserUpdateRequest}
     * @memberof UserAPIApiUpdateUser
     */
    readonly userUpdateRequest: UserUpdateRequest
}

/**
 * UserAPIApi - object-oriented interface
 * @export
 * @class UserAPIApi
 * @extends {BaseAPI}
 */
export class UserAPIApi extends BaseAPI {
    /**
     * 
     * @summary change password
     * @param {UserAPIApiChangePasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public changePassword(requestParameters: UserAPIApiChangePasswordRequest, options?: RawAxiosRequestConfig) {
        return UserAPIApiFp(this.configuration).changePassword(requestParameters.userId, requestParameters.changePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create user account then pushing it to user-profile-service to create user profile
     * @summary registration
     * @param {UserAPIApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public createUser(requestParameters: UserAPIApiCreateUserRequest, options?: RawAxiosRequestConfig) {
        return UserAPIApiFp(this.configuration).createUser(requestParameters.userCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserAPIApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public deleteUser(requestParameters: UserAPIApiDeleteUserRequest, options?: RawAxiosRequestConfig) {
        return UserAPIApiFp(this.configuration).deleteUser(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * find all user existed
     * @summary find all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public findAllUsers(options?: RawAxiosRequestConfig) {
        return UserAPIApiFp(this.configuration).findAllUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get user by id
     * @summary find all users
     * @param {UserAPIApiFindUserByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public findUserById(requestParameters: UserAPIApiFindUserByIdRequest, options?: RawAxiosRequestConfig) {
        return UserAPIApiFp(this.configuration).findUserById(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get the user\'s profile
     * @summary find all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public getInfo(options?: RawAxiosRequestConfig) {
        return UserAPIApiFp(this.configuration).getInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get current user id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public getUserId(options?: RawAxiosRequestConfig) {
        return UserAPIApiFp(this.configuration).getUserId(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserAPIApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAPIApi
     */
    public updateUser(requestParameters: UserAPIApiUpdateUserRequest, options?: RawAxiosRequestConfig) {
        return UserAPIApiFp(this.configuration).updateUser(requestParameters.userId, requestParameters.userUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

