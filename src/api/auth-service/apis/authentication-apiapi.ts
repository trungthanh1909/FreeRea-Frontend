/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseAuthenticateResponse } from '../models';
// @ts-ignore
import type { ApiResponseIntrospectTokenResponse } from '../models';
// @ts-ignore
import type { ApiResponseVoid } from '../models';
// @ts-ignore
import type { AuthenticateRequest } from '../models';
// @ts-ignore
import type { IntrospectTokenRequest } from '../models';
// @ts-ignore
import type { LogoutRequest } from '../models';
// @ts-ignore
import type { RefreshRequest } from '../models';
/**
 * AuthenticationAPIApi - axios parameter creator
 * @export
 */
export const AuthenticationAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Log in by username and password
         * @summary Log in
         * @param {AuthenticateRequest} authenticateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate: async (authenticateRequest: AuthenticateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authenticateRequest' is not null or undefined
            assertParamExists('authenticate', 'authenticateRequest', authenticateRequest)
            const localVarPath = `/auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authenticateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Calling when front-app want to refresh token\'s time duration
         * @summary Refresh token
         * @param {RefreshRequest} refreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate1: async (refreshRequest: RefreshRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshRequest' is not null or undefined
            assertParamExists('authenticate1', 'refreshRequest', refreshRequest)
            const localVarPath = `/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * verify token bear header, response to true or false
         * @summary Introspect/verify token
         * @param {IntrospectTokenRequest} introspectTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        introspectToken: async (introspectTokenRequest: IntrospectTokenRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'introspectTokenRequest' is not null or undefined
            assertParamExists('introspectToken', 'introspectTokenRequest', introspectTokenRequest)
            const localVarPath = `/auth/introspect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(introspectTokenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary log out
         * @param {LogoutRequest} logoutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (logoutRequest: LogoutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logoutRequest' is not null or undefined
            assertParamExists('logout', 'logoutRequest', logoutRequest)
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logoutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationAPIApi - functional programming interface
 * @export
 */
export const AuthenticationAPIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationAPIApiAxiosParamCreator(configuration)
    return {
        /**
         * Log in by username and password
         * @summary Log in
         * @param {AuthenticateRequest} authenticateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticate(authenticateRequest: AuthenticateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseAuthenticateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticate(authenticateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationAPIApi.authenticate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Calling when front-app want to refresh token\'s time duration
         * @summary Refresh token
         * @param {RefreshRequest} refreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticate1(refreshRequest: RefreshRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseAuthenticateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authenticate1(refreshRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationAPIApi.authenticate1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * verify token bear header, response to true or false
         * @summary Introspect/verify token
         * @param {IntrospectTokenRequest} introspectTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async introspectToken(introspectTokenRequest: IntrospectTokenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseIntrospectTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.introspectToken(introspectTokenRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationAPIApi.introspectToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary log out
         * @param {LogoutRequest} logoutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(logoutRequest: LogoutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(logoutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationAPIApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationAPIApi - factory interface
 * @export
 */
export const AuthenticationAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationAPIApiFp(configuration)
    return {
        /**
         * Log in by username and password
         * @summary Log in
         * @param {AuthenticationAPIApiAuthenticateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate(requestParameters: AuthenticationAPIApiAuthenticateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseAuthenticateResponse> {
            return localVarFp.authenticate(requestParameters.authenticateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Calling when front-app want to refresh token\'s time duration
         * @summary Refresh token
         * @param {AuthenticationAPIApiAuthenticate1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate1(requestParameters: AuthenticationAPIApiAuthenticate1Request, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseAuthenticateResponse> {
            return localVarFp.authenticate1(requestParameters.refreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * verify token bear header, response to true or false
         * @summary Introspect/verify token
         * @param {AuthenticationAPIApiIntrospectTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        introspectToken(requestParameters: AuthenticationAPIApiIntrospectTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseIntrospectTokenResponse> {
            return localVarFp.introspectToken(requestParameters.introspectTokenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary log out
         * @param {AuthenticationAPIApiLogoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(requestParameters: AuthenticationAPIApiLogoutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.logout(requestParameters.logoutRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authenticate operation in AuthenticationAPIApi.
 * @export
 * @interface AuthenticationAPIApiAuthenticateRequest
 */
export interface AuthenticationAPIApiAuthenticateRequest {
    /**
     * 
     * @type {AuthenticateRequest}
     * @memberof AuthenticationAPIApiAuthenticate
     */
    readonly authenticateRequest: AuthenticateRequest
}

/**
 * Request parameters for authenticate1 operation in AuthenticationAPIApi.
 * @export
 * @interface AuthenticationAPIApiAuthenticate1Request
 */
export interface AuthenticationAPIApiAuthenticate1Request {
    /**
     * 
     * @type {RefreshRequest}
     * @memberof AuthenticationAPIApiAuthenticate1
     */
    readonly refreshRequest: RefreshRequest
}

/**
 * Request parameters for introspectToken operation in AuthenticationAPIApi.
 * @export
 * @interface AuthenticationAPIApiIntrospectTokenRequest
 */
export interface AuthenticationAPIApiIntrospectTokenRequest {
    /**
     * 
     * @type {IntrospectTokenRequest}
     * @memberof AuthenticationAPIApiIntrospectToken
     */
    readonly introspectTokenRequest: IntrospectTokenRequest
}

/**
 * Request parameters for logout operation in AuthenticationAPIApi.
 * @export
 * @interface AuthenticationAPIApiLogoutRequest
 */
export interface AuthenticationAPIApiLogoutRequest {
    /**
     * 
     * @type {LogoutRequest}
     * @memberof AuthenticationAPIApiLogout
     */
    readonly logoutRequest: LogoutRequest
}

/**
 * AuthenticationAPIApi - object-oriented interface
 * @export
 * @class AuthenticationAPIApi
 * @extends {BaseAPI}
 */
export class AuthenticationAPIApi extends BaseAPI {
    /**
     * Log in by username and password
     * @summary Log in
     * @param {AuthenticationAPIApiAuthenticateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationAPIApi
     */
    public authenticate(requestParameters: AuthenticationAPIApiAuthenticateRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationAPIApiFp(this.configuration).authenticate(requestParameters.authenticateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Calling when front-app want to refresh token\'s time duration
     * @summary Refresh token
     * @param {AuthenticationAPIApiAuthenticate1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationAPIApi
     */
    public authenticate1(requestParameters: AuthenticationAPIApiAuthenticate1Request, options?: RawAxiosRequestConfig) {
        return AuthenticationAPIApiFp(this.configuration).authenticate1(requestParameters.refreshRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * verify token bear header, response to true or false
     * @summary Introspect/verify token
     * @param {AuthenticationAPIApiIntrospectTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationAPIApi
     */
    public introspectToken(requestParameters: AuthenticationAPIApiIntrospectTokenRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationAPIApiFp(this.configuration).introspectToken(requestParameters.introspectTokenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary log out
     * @param {AuthenticationAPIApiLogoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationAPIApi
     */
    public logout(requestParameters: AuthenticationAPIApiLogoutRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationAPIApiFp(this.configuration).logout(requestParameters.logoutRequest, options).then((request) => request(this.axios, this.basePath));
    }
}