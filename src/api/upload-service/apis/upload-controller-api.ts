/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseAvatarUploadResponse } from '../models';
// @ts-ignore
import type { ApiResponseCoverUploadResponse } from '../models';
// @ts-ignore
import type { ApiResponseFromUrlUploadResponse } from '../models';
// @ts-ignore
import type { ApiResponseUploadResponse } from '../models';
// @ts-ignore
import type { FromUrlUploadRequest } from '../models';
/**
 * UploadControllerApi - axios parameter creator
 * @export
 */
export const UploadControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} userId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAvatar: async (userId: string, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('uploadAvatar', 'userId', userId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadAvatar', 'file', file)
            const localVarPath = `/upload/avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} bookId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCover: async (bookId: string, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('uploadCover', 'bookId', bookId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadCover', 'file', file)
            const localVarPath = `/upload/cover`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (bookId !== undefined) {
                localVarQueryParameter['bookId'] = bookId;
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FromUrlUploadRequest} fromUrlUploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFromUrl: async (fromUrlUploadRequest: FromUrlUploadRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromUrlUploadRequest' is not null or undefined
            assertParamExists('uploadFromUrl', 'fromUrlUploadRequest', fromUrlUploadRequest)
            const localVarPath = `/upload/from-url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fromUrlUploadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadImage: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadImage', 'file', file)
            const localVarPath = `/upload/image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UploadControllerApi - functional programming interface
 * @export
 */
export const UploadControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UploadControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} userId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadAvatar(userId: string, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseAvatarUploadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadAvatar(userId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadControllerApi.uploadAvatar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} bookId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadCover(bookId: string, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseCoverUploadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadCover(bookId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadControllerApi.uploadCover']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {FromUrlUploadRequest} fromUrlUploadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFromUrl(fromUrlUploadRequest: FromUrlUploadRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseFromUrlUploadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFromUrl(fromUrlUploadRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadControllerApi.uploadFromUrl']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadImage(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseUploadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadImage(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UploadControllerApi.uploadImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UploadControllerApi - factory interface
 * @export
 */
export const UploadControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UploadControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {UploadControllerApiUploadAvatarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAvatar(requestParameters: UploadControllerApiUploadAvatarRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseAvatarUploadResponse> {
            return localVarFp.uploadAvatar(requestParameters.userId, requestParameters.file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UploadControllerApiUploadCoverRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCover(requestParameters: UploadControllerApiUploadCoverRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseCoverUploadResponse> {
            return localVarFp.uploadCover(requestParameters.bookId, requestParameters.file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UploadControllerApiUploadFromUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFromUrl(requestParameters: UploadControllerApiUploadFromUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseFromUrlUploadResponse> {
            return localVarFp.uploadFromUrl(requestParameters.fromUrlUploadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UploadControllerApiUploadImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadImage(requestParameters: UploadControllerApiUploadImageRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseUploadResponse> {
            return localVarFp.uploadImage(requestParameters.file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for uploadAvatar operation in UploadControllerApi.
 * @export
 * @interface UploadControllerApiUploadAvatarRequest
 */
export interface UploadControllerApiUploadAvatarRequest {
    /**
     * 
     * @type {string}
     * @memberof UploadControllerApiUploadAvatar
     */
    readonly userId: string

    /**
     * 
     * @type {File}
     * @memberof UploadControllerApiUploadAvatar
     */
    readonly file: File
}

/**
 * Request parameters for uploadCover operation in UploadControllerApi.
 * @export
 * @interface UploadControllerApiUploadCoverRequest
 */
export interface UploadControllerApiUploadCoverRequest {
    /**
     * 
     * @type {string}
     * @memberof UploadControllerApiUploadCover
     */
    readonly bookId: string

    /**
     * 
     * @type {File}
     * @memberof UploadControllerApiUploadCover
     */
    readonly file: File
}

/**
 * Request parameters for uploadFromUrl operation in UploadControllerApi.
 * @export
 * @interface UploadControllerApiUploadFromUrlRequest
 */
export interface UploadControllerApiUploadFromUrlRequest {
    /**
     * 
     * @type {FromUrlUploadRequest}
     * @memberof UploadControllerApiUploadFromUrl
     */
    readonly fromUrlUploadRequest: FromUrlUploadRequest
}

/**
 * Request parameters for uploadImage operation in UploadControllerApi.
 * @export
 * @interface UploadControllerApiUploadImageRequest
 */
export interface UploadControllerApiUploadImageRequest {
    /**
     * 
     * @type {File}
     * @memberof UploadControllerApiUploadImage
     */
    readonly file: File
}

/**
 * UploadControllerApi - object-oriented interface
 * @export
 * @class UploadControllerApi
 * @extends {BaseAPI}
 */
export class UploadControllerApi extends BaseAPI {
    /**
     * 
     * @param {UploadControllerApiUploadAvatarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadControllerApi
     */
    public uploadAvatar(requestParameters: UploadControllerApiUploadAvatarRequest, options?: RawAxiosRequestConfig) {
        return UploadControllerApiFp(this.configuration).uploadAvatar(requestParameters.userId, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadControllerApiUploadCoverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadControllerApi
     */
    public uploadCover(requestParameters: UploadControllerApiUploadCoverRequest, options?: RawAxiosRequestConfig) {
        return UploadControllerApiFp(this.configuration).uploadCover(requestParameters.bookId, requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadControllerApiUploadFromUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadControllerApi
     */
    public uploadFromUrl(requestParameters: UploadControllerApiUploadFromUrlRequest, options?: RawAxiosRequestConfig) {
        return UploadControllerApiFp(this.configuration).uploadFromUrl(requestParameters.fromUrlUploadRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadControllerApiUploadImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadControllerApi
     */
    public uploadImage(requestParameters: UploadControllerApiUploadImageRequest, options?: RawAxiosRequestConfig) {
        return UploadControllerApiFp(this.configuration).uploadImage(requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }
}

