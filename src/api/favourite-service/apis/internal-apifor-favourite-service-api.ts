/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseBookAddResponse } from '../models';
// @ts-ignore
import type { ApiResponseBookRemoveResponse } from '../models';
// @ts-ignore
import type { ApiResponseBoolean } from '../models';
// @ts-ignore
import type { ApiResponseListFavouriteListResponse } from '../models';
// @ts-ignore
import type { ApiResponseVoid } from '../models';
// @ts-ignore
import type { BookAddRequest } from '../models';
// @ts-ignore
import type { BookRemoveRequest } from '../models';
/**
 * InternalAPIForFavouriteServiceApi - axios parameter creator
 * @export
 */
export const InternalAPIForFavouriteServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a book to user\'s favourite list
         * @param {BookAddRequest} bookAddRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBookToFavourite: async (bookAddRequest: BookAddRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookAddRequest' is not null or undefined
            assertParamExists('addBookToFavourite', 'bookAddRequest', bookAddRequest)
            const localVarPath = `/internal/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookAddRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all favourited books by user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavouriteListByUserId: async (username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('getFavouriteListByUserId', 'username', username)
            const localVarPath = `/internal/get-favourite-list/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check if a book is in user\'s favourite list
         * @param {string} username 
         * @param {string} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isFavourite: async (username: string, bookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('isFavourite', 'username', username)
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('isFavourite', 'bookId', bookId)
            const localVarPath = `/internal/is-favourite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (bookId !== undefined) {
                localVarQueryParameter['bookId'] = bookId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove all favourites by book ID
         * @param {string} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllFavouritesByBookId: async (bookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookId' is not null or undefined
            assertParamExists('removeAllFavouritesByBookId', 'bookId', bookId)
            const localVarPath = `/internal/remove-all-by-book/{bookId}`
                .replace(`{${"bookId"}}`, encodeURIComponent(String(bookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove all favourite books by user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllFavouritesByUser: async (username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('removeAllFavouritesByUser', 'username', username)
            const localVarPath = `/internal/remove-all-by-user/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a book from user\'s favourite list
         * @param {BookRemoveRequest} bookRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBookFromFavourite: async (bookRemoveRequest: BookRemoveRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookRemoveRequest' is not null or undefined
            assertParamExists('removeBookFromFavourite', 'bookRemoveRequest', bookRemoveRequest)
            const localVarPath = `/internal/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookRemoveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InternalAPIForFavouriteServiceApi - functional programming interface
 * @export
 */
export const InternalAPIForFavouriteServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InternalAPIForFavouriteServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a book to user\'s favourite list
         * @param {BookAddRequest} bookAddRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBookToFavourite(bookAddRequest: BookAddRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBookAddResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBookToFavourite(bookAddRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalAPIForFavouriteServiceApi.addBookToFavourite']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all favourited books by user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFavouriteListByUserId(username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListFavouriteListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFavouriteListByUserId(username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalAPIForFavouriteServiceApi.getFavouriteListByUserId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Check if a book is in user\'s favourite list
         * @param {string} username 
         * @param {string} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isFavourite(username: string, bookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.isFavourite(username, bookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalAPIForFavouriteServiceApi.isFavourite']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove all favourites by book ID
         * @param {string} bookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAllFavouritesByBookId(bookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAllFavouritesByBookId(bookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalAPIForFavouriteServiceApi.removeAllFavouritesByBookId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove all favourite books by user
         * @param {string} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAllFavouritesByUser(username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseVoid>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAllFavouritesByUser(username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalAPIForFavouriteServiceApi.removeAllFavouritesByUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove a book from user\'s favourite list
         * @param {BookRemoveRequest} bookRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeBookFromFavourite(bookRemoveRequest: BookRemoveRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseBookRemoveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeBookFromFavourite(bookRemoveRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalAPIForFavouriteServiceApi.removeBookFromFavourite']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InternalAPIForFavouriteServiceApi - factory interface
 * @export
 */
export const InternalAPIForFavouriteServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InternalAPIForFavouriteServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a book to user\'s favourite list
         * @param {InternalAPIForFavouriteServiceApiAddBookToFavouriteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBookToFavourite(requestParameters: InternalAPIForFavouriteServiceApiAddBookToFavouriteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBookAddResponse> {
            return localVarFp.addBookToFavourite(requestParameters.bookAddRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all favourited books by user
         * @param {InternalAPIForFavouriteServiceApiGetFavouriteListByUserIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavouriteListByUserId(requestParameters: InternalAPIForFavouriteServiceApiGetFavouriteListByUserIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListFavouriteListResponse> {
            return localVarFp.getFavouriteListByUserId(requestParameters.username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check if a book is in user\'s favourite list
         * @param {InternalAPIForFavouriteServiceApiIsFavouriteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isFavourite(requestParameters: InternalAPIForFavouriteServiceApiIsFavouriteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBoolean> {
            return localVarFp.isFavourite(requestParameters.username, requestParameters.bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove all favourites by book ID
         * @param {InternalAPIForFavouriteServiceApiRemoveAllFavouritesByBookIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllFavouritesByBookId(requestParameters: InternalAPIForFavouriteServiceApiRemoveAllFavouritesByBookIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.removeAllFavouritesByBookId(requestParameters.bookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove all favourite books by user
         * @param {InternalAPIForFavouriteServiceApiRemoveAllFavouritesByUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAllFavouritesByUser(requestParameters: InternalAPIForFavouriteServiceApiRemoveAllFavouritesByUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseVoid> {
            return localVarFp.removeAllFavouritesByUser(requestParameters.username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove a book from user\'s favourite list
         * @param {InternalAPIForFavouriteServiceApiRemoveBookFromFavouriteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBookFromFavourite(requestParameters: InternalAPIForFavouriteServiceApiRemoveBookFromFavouriteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseBookRemoveResponse> {
            return localVarFp.removeBookFromFavourite(requestParameters.bookRemoveRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addBookToFavourite operation in InternalAPIForFavouriteServiceApi.
 * @export
 * @interface InternalAPIForFavouriteServiceApiAddBookToFavouriteRequest
 */
export interface InternalAPIForFavouriteServiceApiAddBookToFavouriteRequest {
    /**
     * 
     * @type {BookAddRequest}
     * @memberof InternalAPIForFavouriteServiceApiAddBookToFavourite
     */
    readonly bookAddRequest: BookAddRequest
}

/**
 * Request parameters for getFavouriteListByUserId operation in InternalAPIForFavouriteServiceApi.
 * @export
 * @interface InternalAPIForFavouriteServiceApiGetFavouriteListByUserIdRequest
 */
export interface InternalAPIForFavouriteServiceApiGetFavouriteListByUserIdRequest {
    /**
     * 
     * @type {string}
     * @memberof InternalAPIForFavouriteServiceApiGetFavouriteListByUserId
     */
    readonly username: string
}

/**
 * Request parameters for isFavourite operation in InternalAPIForFavouriteServiceApi.
 * @export
 * @interface InternalAPIForFavouriteServiceApiIsFavouriteRequest
 */
export interface InternalAPIForFavouriteServiceApiIsFavouriteRequest {
    /**
     * 
     * @type {string}
     * @memberof InternalAPIForFavouriteServiceApiIsFavourite
     */
    readonly username: string

    /**
     * 
     * @type {string}
     * @memberof InternalAPIForFavouriteServiceApiIsFavourite
     */
    readonly bookId: string
}

/**
 * Request parameters for removeAllFavouritesByBookId operation in InternalAPIForFavouriteServiceApi.
 * @export
 * @interface InternalAPIForFavouriteServiceApiRemoveAllFavouritesByBookIdRequest
 */
export interface InternalAPIForFavouriteServiceApiRemoveAllFavouritesByBookIdRequest {
    /**
     * 
     * @type {string}
     * @memberof InternalAPIForFavouriteServiceApiRemoveAllFavouritesByBookId
     */
    readonly bookId: string
}

/**
 * Request parameters for removeAllFavouritesByUser operation in InternalAPIForFavouriteServiceApi.
 * @export
 * @interface InternalAPIForFavouriteServiceApiRemoveAllFavouritesByUserRequest
 */
export interface InternalAPIForFavouriteServiceApiRemoveAllFavouritesByUserRequest {
    /**
     * 
     * @type {string}
     * @memberof InternalAPIForFavouriteServiceApiRemoveAllFavouritesByUser
     */
    readonly username: string
}

/**
 * Request parameters for removeBookFromFavourite operation in InternalAPIForFavouriteServiceApi.
 * @export
 * @interface InternalAPIForFavouriteServiceApiRemoveBookFromFavouriteRequest
 */
export interface InternalAPIForFavouriteServiceApiRemoveBookFromFavouriteRequest {
    /**
     * 
     * @type {BookRemoveRequest}
     * @memberof InternalAPIForFavouriteServiceApiRemoveBookFromFavourite
     */
    readonly bookRemoveRequest: BookRemoveRequest
}

/**
 * InternalAPIForFavouriteServiceApi - object-oriented interface
 * @export
 * @class InternalAPIForFavouriteServiceApi
 * @extends {BaseAPI}
 */
export class InternalAPIForFavouriteServiceApi extends BaseAPI {
    /**
     * 
     * @summary Add a book to user\'s favourite list
     * @param {InternalAPIForFavouriteServiceApiAddBookToFavouriteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalAPIForFavouriteServiceApi
     */
    public addBookToFavourite(requestParameters: InternalAPIForFavouriteServiceApiAddBookToFavouriteRequest, options?: RawAxiosRequestConfig) {
        return InternalAPIForFavouriteServiceApiFp(this.configuration).addBookToFavourite(requestParameters.bookAddRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all favourited books by user
     * @param {InternalAPIForFavouriteServiceApiGetFavouriteListByUserIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalAPIForFavouriteServiceApi
     */
    public getFavouriteListByUserId(requestParameters: InternalAPIForFavouriteServiceApiGetFavouriteListByUserIdRequest, options?: RawAxiosRequestConfig) {
        return InternalAPIForFavouriteServiceApiFp(this.configuration).getFavouriteListByUserId(requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check if a book is in user\'s favourite list
     * @param {InternalAPIForFavouriteServiceApiIsFavouriteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalAPIForFavouriteServiceApi
     */
    public isFavourite(requestParameters: InternalAPIForFavouriteServiceApiIsFavouriteRequest, options?: RawAxiosRequestConfig) {
        return InternalAPIForFavouriteServiceApiFp(this.configuration).isFavourite(requestParameters.username, requestParameters.bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove all favourites by book ID
     * @param {InternalAPIForFavouriteServiceApiRemoveAllFavouritesByBookIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalAPIForFavouriteServiceApi
     */
    public removeAllFavouritesByBookId(requestParameters: InternalAPIForFavouriteServiceApiRemoveAllFavouritesByBookIdRequest, options?: RawAxiosRequestConfig) {
        return InternalAPIForFavouriteServiceApiFp(this.configuration).removeAllFavouritesByBookId(requestParameters.bookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove all favourite books by user
     * @param {InternalAPIForFavouriteServiceApiRemoveAllFavouritesByUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalAPIForFavouriteServiceApi
     */
    public removeAllFavouritesByUser(requestParameters: InternalAPIForFavouriteServiceApiRemoveAllFavouritesByUserRequest, options?: RawAxiosRequestConfig) {
        return InternalAPIForFavouriteServiceApiFp(this.configuration).removeAllFavouritesByUser(requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove a book from user\'s favourite list
     * @param {InternalAPIForFavouriteServiceApiRemoveBookFromFavouriteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalAPIForFavouriteServiceApi
     */
    public removeBookFromFavourite(requestParameters: InternalAPIForFavouriteServiceApiRemoveBookFromFavouriteRequest, options?: RawAxiosRequestConfig) {
        return InternalAPIForFavouriteServiceApiFp(this.configuration).removeBookFromFavourite(requestParameters.bookRemoveRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

