/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiResponseListUserReadingHistory } from '../models';
// @ts-ignore
import type { ApiResponseUserProfileChangeAvatarResponse } from '../models';
// @ts-ignore
import type { ApiResponseUserProfileCreationResponse } from '../models';
// @ts-ignore
import type { ApiResponseUserProfileDeleteResponse } from '../models';
// @ts-ignore
import type { ApiResponseUserProfileUpdateResponse } from '../models';
// @ts-ignore
import type { UserProfileChangeAvatarRequest } from '../models';
// @ts-ignore
import type { UserProfileCreationRequest } from '../models';
// @ts-ignore
import type { UserProfileUpdateRequest } from '../models';
/**
 * InternalUserProfileControllerApi - axios parameter creator
 * @export
 */
export const InternalUserProfileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserProfileChangeAvatarRequest} userProfileChangeAvatarRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAvatar: async (userProfileChangeAvatarRequest: UserProfileChangeAvatarRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userProfileChangeAvatarRequest' is not null or undefined
            assertParamExists('changeAvatar', 'userProfileChangeAvatarRequest', userProfileChangeAvatarRequest)
            const localVarPath = `/internal/change-avatar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userProfileChangeAvatarRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserProfileCreationRequest} userProfileCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserProfile: async (userProfileCreationRequest: UserProfileCreationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userProfileCreationRequest' is not null or undefined
            assertParamExists('createUserProfile', 'userProfileCreationRequest', userProfileCreationRequest)
            const localVarPath = `/internal/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userProfileCreationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserProfile: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUserProfile', 'userId', userId)
            const localVarPath = `/internal/delete/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserReadingHistory: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserReadingHistory', 'userId', userId)
            const localVarPath = `/internal/get-reading-history/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserProfileUpdateRequest} userProfileUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfile: async (userProfileUpdateRequest: UserProfileUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userProfileUpdateRequest' is not null or undefined
            assertParamExists('updateUserProfile', 'userProfileUpdateRequest', userProfileUpdateRequest)
            const localVarPath = `/internal/update-user-profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userProfileUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InternalUserProfileControllerApi - functional programming interface
 * @export
 */
export const InternalUserProfileControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InternalUserProfileControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserProfileChangeAvatarRequest} userProfileChangeAvatarRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeAvatar(userProfileChangeAvatarRequest: UserProfileChangeAvatarRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseUserProfileChangeAvatarResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeAvatar(userProfileChangeAvatarRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalUserProfileControllerApi.changeAvatar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserProfileCreationRequest} userProfileCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserProfile(userProfileCreationRequest: UserProfileCreationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseUserProfileCreationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserProfile(userProfileCreationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalUserProfileControllerApi.createUserProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserProfile(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseUserProfileDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserProfile(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalUserProfileControllerApi.deleteUserProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserReadingHistory(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseListUserReadingHistory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserReadingHistory(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalUserProfileControllerApi.getUserReadingHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserProfileUpdateRequest} userProfileUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserProfile(userProfileUpdateRequest: UserProfileUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponseUserProfileUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserProfile(userProfileUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InternalUserProfileControllerApi.updateUserProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InternalUserProfileControllerApi - factory interface
 * @export
 */
export const InternalUserProfileControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InternalUserProfileControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {InternalUserProfileControllerApiChangeAvatarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAvatar(requestParameters: InternalUserProfileControllerApiChangeAvatarRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseUserProfileChangeAvatarResponse> {
            return localVarFp.changeAvatar(requestParameters.userProfileChangeAvatarRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InternalUserProfileControllerApiCreateUserProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserProfile(requestParameters: InternalUserProfileControllerApiCreateUserProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseUserProfileCreationResponse> {
            return localVarFp.createUserProfile(requestParameters.userProfileCreationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InternalUserProfileControllerApiDeleteUserProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserProfile(requestParameters: InternalUserProfileControllerApiDeleteUserProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseUserProfileDeleteResponse> {
            return localVarFp.deleteUserProfile(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InternalUserProfileControllerApiGetUserReadingHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserReadingHistory(requestParameters: InternalUserProfileControllerApiGetUserReadingHistoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseListUserReadingHistory> {
            return localVarFp.getUserReadingHistory(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InternalUserProfileControllerApiUpdateUserProfileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfile(requestParameters: InternalUserProfileControllerApiUpdateUserProfileRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponseUserProfileUpdateResponse> {
            return localVarFp.updateUserProfile(requestParameters.userProfileUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for changeAvatar operation in InternalUserProfileControllerApi.
 * @export
 * @interface InternalUserProfileControllerApiChangeAvatarRequest
 */
export interface InternalUserProfileControllerApiChangeAvatarRequest {
    /**
     * 
     * @type {UserProfileChangeAvatarRequest}
     * @memberof InternalUserProfileControllerApiChangeAvatar
     */
    readonly userProfileChangeAvatarRequest: UserProfileChangeAvatarRequest
}

/**
 * Request parameters for createUserProfile operation in InternalUserProfileControllerApi.
 * @export
 * @interface InternalUserProfileControllerApiCreateUserProfileRequest
 */
export interface InternalUserProfileControllerApiCreateUserProfileRequest {
    /**
     * 
     * @type {UserProfileCreationRequest}
     * @memberof InternalUserProfileControllerApiCreateUserProfile
     */
    readonly userProfileCreationRequest: UserProfileCreationRequest
}

/**
 * Request parameters for deleteUserProfile operation in InternalUserProfileControllerApi.
 * @export
 * @interface InternalUserProfileControllerApiDeleteUserProfileRequest
 */
export interface InternalUserProfileControllerApiDeleteUserProfileRequest {
    /**
     * 
     * @type {string}
     * @memberof InternalUserProfileControllerApiDeleteUserProfile
     */
    readonly userId: string
}

/**
 * Request parameters for getUserReadingHistory operation in InternalUserProfileControllerApi.
 * @export
 * @interface InternalUserProfileControllerApiGetUserReadingHistoryRequest
 */
export interface InternalUserProfileControllerApiGetUserReadingHistoryRequest {
    /**
     * 
     * @type {string}
     * @memberof InternalUserProfileControllerApiGetUserReadingHistory
     */
    readonly userId: string
}

/**
 * Request parameters for updateUserProfile operation in InternalUserProfileControllerApi.
 * @export
 * @interface InternalUserProfileControllerApiUpdateUserProfileRequest
 */
export interface InternalUserProfileControllerApiUpdateUserProfileRequest {
    /**
     * 
     * @type {UserProfileUpdateRequest}
     * @memberof InternalUserProfileControllerApiUpdateUserProfile
     */
    readonly userProfileUpdateRequest: UserProfileUpdateRequest
}

/**
 * InternalUserProfileControllerApi - object-oriented interface
 * @export
 * @class InternalUserProfileControllerApi
 * @extends {BaseAPI}
 */
export class InternalUserProfileControllerApi extends BaseAPI {
    /**
     * 
     * @param {InternalUserProfileControllerApiChangeAvatarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalUserProfileControllerApi
     */
    public changeAvatar(requestParameters: InternalUserProfileControllerApiChangeAvatarRequest, options?: RawAxiosRequestConfig) {
        return InternalUserProfileControllerApiFp(this.configuration).changeAvatar(requestParameters.userProfileChangeAvatarRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InternalUserProfileControllerApiCreateUserProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalUserProfileControllerApi
     */
    public createUserProfile(requestParameters: InternalUserProfileControllerApiCreateUserProfileRequest, options?: RawAxiosRequestConfig) {
        return InternalUserProfileControllerApiFp(this.configuration).createUserProfile(requestParameters.userProfileCreationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InternalUserProfileControllerApiDeleteUserProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalUserProfileControllerApi
     */
    public deleteUserProfile(requestParameters: InternalUserProfileControllerApiDeleteUserProfileRequest, options?: RawAxiosRequestConfig) {
        return InternalUserProfileControllerApiFp(this.configuration).deleteUserProfile(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InternalUserProfileControllerApiGetUserReadingHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalUserProfileControllerApi
     */
    public getUserReadingHistory(requestParameters: InternalUserProfileControllerApiGetUserReadingHistoryRequest, options?: RawAxiosRequestConfig) {
        return InternalUserProfileControllerApiFp(this.configuration).getUserReadingHistory(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InternalUserProfileControllerApiUpdateUserProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalUserProfileControllerApi
     */
    public updateUserProfile(requestParameters: InternalUserProfileControllerApiUpdateUserProfileRequest, options?: RawAxiosRequestConfig) {
        return InternalUserProfileControllerApiFp(this.configuration).updateUserProfile(requestParameters.userProfileUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

